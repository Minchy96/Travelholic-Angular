package pmf.mina.bjelica.travelholic.controllers;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

import pmf.mina.bjelica.travelholic.model.dto.LoginDto;
import pmf.mina.bjelica.travelholic.model.dto.UserDto;
import pmf.mina.bjelica.travelholic.model.entity.User;
import pmf.mina.bjelica.travelholic.service.StorageService;
import pmf.mina.bjelica.travelholic.service.UserService;

@Controller
@RequestMapping("/user")
@CrossOrigin(origins = "http://localhost:4200")
public class UserApi {

	@Autowired
	UserService userService;

	@Autowired
	StorageService storageService;

	@GetMapping("/all")
	public ResponseEntity<List<User>> getAllUsers() {
		return ResponseEntity.ok(userService.findAll());
	}

	@RequestMapping(method = RequestMethod.POST, value = "/save")
	public ResponseEntity<?> saveUser(@RequestBody UserDto userDto) {
		System.out.println("usao");

		userService.save(userDto);

		return new ResponseEntity<Object>(HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.POST, value = "/login")
	public ResponseEntity<?> login(@RequestBody LoginDto loginDto) {
		System.out.println("usao");

		int eq = userService.login(loginDto);
		System.out.println(eq);

		return new ResponseEntity<Object>(eq, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/get/{username}")
	public ResponseEntity<?> getUserByUsername(@PathVariable String username) {
		System.out.println("usao");

		User user = userService.get(username);

		return new ResponseEntity<Object>(user, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.POST, value = "/update")
	public ResponseEntity<?> userUpdate(@RequestBody UserDto userDto) {
		System.out.println("usao" + userDto.getFirstName());

		User user = userService.update(userDto);

		return new ResponseEntity<Object>(user, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/try/{username}")
	public ResponseEntity<?> tryUsername(@PathVariable String username) {
		System.out.println("usao");

		boolean ok = userService.tryUsername(username);

		return new ResponseEntity<Object>(ok, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.POST, value = "/uploadImage")
	public ResponseEntity<?> userUpdate(@RequestBody MultipartFile file) {
		String message = "";
		try {
			storageService.store(file);

			message = "You successfully uploaded " + file.getOriginalFilename() + "!";
			System.out.println(message);
			return ResponseEntity.status(HttpStatus.OK).body(message);
		} catch (Exception e) {
			message = "FAIL to upload " + file.getOriginalFilename() + "!";
			System.out.println(message);
			return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(message);
		}
//		1.
//		System.out.println("Usao");
//		if (file != null) {
//			System.out.println(" adresica");
//
//			try {
//				String realPathToUploads = "/slike-projekat/";
//				if (!new java.io.File(realPathToUploads).exists()) {
//					System.out.println("Fajl nije postojao " + realPathToUploads);
//					new java.io.File(realPathToUploads).mkdir();
//				} else
//					System.out.println("Fajl je postojao " + realPathToUploads);
//
//				byte[] bytes = file.getBytes();
//				Path path = Paths.get(realPathToUploads + file.getOriginalFilename());
//				Files.write(path, bytes);
//
//			} catch (Exception e) {
//				// TODO: handle exception
//			}
//
//		} else
//			System.out.println("gde je greska");
//		return new ResponseEntity<>(HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/getImage/{fileName}")
	public ResponseEntity<?> getImage(@PathVariable String fileName) {
		System.out.println("Ovde sam");
		try {
			Resource fileResource = storageService.loadFile(fileName);
			File file = fileResource.getFile();
			byte[] bytesArray = new byte[(int) file.length()];
			FileInputStream fis = new FileInputStream(file);
			fis.read(bytesArray); // read file into bytes[]
			fis.close();
			return ResponseEntity.ok().body(fis);
		} catch (Exception e) {
			// TODO: handle exception
			String message = "Doslo je do greske.";
			System.out.println("doslo je do greske");
			return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(message);
		}

//		1.
//		try {
//			Path path = Paths.get("/slike-projekat/");
//			Path file = path.resolve(fileName);
//			Resource resource = new UrlResource(file.toUri());
//			return new ResponseEntity<>(resource,HttpStatus.OK);
//
//		} catch (Exception e) {
//			e.printStackTrace();
//			return (ResponseEntity<?>) ResponseEntity.notFound();
//		}

//   2.)
//		System.out.println("usao sam i ovde!");
//		String mineType = servletContext.getMimeType(fileName);
//		MediaType mediaType = MediaType.parseMediaType(mineType);
//	
//		Path filePath= Paths.get("/slike-projekat/" + fileName);
//		File file = new File(filePath.toString());
//		
//		if (file.isFile())
//			System.out.println("Fajl je !");
//		
//		Resource resource;
//		try {
//			resource = new UrlResource(file.toURI());
//			return ResponseEntity.ok()
//					// Content-Disposition
//					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
//					// Content-Type
//					.contentType(mediaType)
//					// Contet-Length
//					.contentLength(file.length()) //
//					.body(resource);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

	}

}
