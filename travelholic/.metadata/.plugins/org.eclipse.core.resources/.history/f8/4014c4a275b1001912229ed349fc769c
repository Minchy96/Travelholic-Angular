package pmf.mina.bjelica.travelholic.controllers;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

import pmf.mina.bjelica.travelholic.model.dto.LoginDto;
import pmf.mina.bjelica.travelholic.model.dto.UserDto;
import pmf.mina.bjelica.travelholic.model.entity.User;
import pmf.mina.bjelica.travelholic.service.UserService;

@Controller
@RequestMapping("/user")
@CrossOrigin(origins = "http://localhost:4200")
public class UserApi {

	@Autowired
	UserService userService;

	@Autowired
	private ServletContext servletContext;

	@Autowired
	private HttpServletRequest request;

	@GetMapping("/all")
	public ResponseEntity<List<User>> getAllUsers() {
		return ResponseEntity.ok(userService.findAll());
	}

	@RequestMapping(method = RequestMethod.POST, value = "/save")
	public ResponseEntity<?> saveUser(@RequestBody UserDto userDto) {
		System.out.println("usao");

		userService.save(userDto);

		return new ResponseEntity<Object>(HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.POST, value = "/login")
	public ResponseEntity<?> login(@RequestBody LoginDto loginDto) {
		System.out.println("usao");

		int eq = userService.login(loginDto);
		System.out.println(eq);

		return new ResponseEntity<Object>(eq, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/get/{username}")
	public ResponseEntity<?> getUserByUsername(@PathVariable String username) {
		System.out.println("usao");

		User user = userService.get(username);

		return new ResponseEntity<Object>(user, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.POST, value = "/update")
	public ResponseEntity<?> userUpdate(@RequestBody UserDto userDto) {
		System.out.println("usao" + userDto.getFirstName());

		User user = userService.update(userDto);

		return new ResponseEntity<Object>(user, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/try/{username}")
	public ResponseEntity<?> tryUsername(@PathVariable String username) {
		System.out.println("usao");

		boolean ok = userService.tryUsername(username);

		return new ResponseEntity<Object>(ok, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.POST, value = "/uploadImage")
	public ResponseEntity<?> userUpdate(@RequestBody MultipartFile file) {
		System.out.println("Usao");
		if (file != null) {
			System.out.println(" adresica");

			try {
				String realPathToUploads = "/slike-projekat/";

//				String realPathToUploads = request.getServletContext().getRealPath(folder);

				if (!new java.io.File(realPathToUploads).exists()) {
					System.out.println("Fajl nije postojao " + realPathToUploads);
					new java.io.File(realPathToUploads).mkdir();
				} else
					System.out.println("Fajl je postojao " + realPathToUploads);

				byte[] bytes = file.getBytes();
				Path path = Paths.get(realPathToUploads + file.getOriginalFilename());
				Files.write(path, bytes);

			} catch (Exception e) {
				// TODO: handle exception
			}

		} else
			System.out.println("gde je greska");
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/getImage/{fileName}")
	public ResponseEntity<?> getImage(@PathVariable String fileName, Model model) throws IOException {
//		1.
//		try {
//			Path path = Paths.get("/slike-projekat/");
//			Path file = path.resolve(fileName);
//			Resource resource = new UrlResource(file.toUri());
//			return new ResponseEntity<>(resource,HttpStatus.OK);
//
//		} catch (Exception e) {
//			e.printStackTrace();
//			return (ResponseEntity<?>) ResponseEntity.notFound();
//		}

//   2.)

		String mineType = servletContext.getMimeType(fileName);
		MediaType mediaType = MediaType.parseMediaType(mineType);

		File file = new File("/slike-projekat/" + fileName);
		if (file.exists()) {
			System.out.println("Trebalo bi da se desi nesto");
		}
		if (file.isFile()) {
			System.out.println("fajl je");
		}
		InputStreamResource resource = new InputStreamResource(new FileInputStream(file));
		return ResponseEntity.ok()
				// Content-Disposition
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				// Content-Type
				.contentType(mediaType)
				// Contet-Length
				.contentLength(file.length()) //
				.body(resource);

	}

	/*
	 * public ResponseEntity<InputStreamResource> downloadFile1(
	 * 
	 * @RequestParam(defaultValue = DEFAULT_FILE_NAME) String fileName) throws
	 * IOException {
	 * 
	 * MediaType mediaType =
	 * MediaTypeUtils.getMediaTypeForFileName(this.servletContext, fileName);
	 * System.out.println("fileName: " + fileName); System.out.println("mediaType: "
	 * + mediaType);
	 * 
	 * File file = new File(DIRECTORY + "/" + fileName); InputStreamResource
	 * resource = new InputStreamResource(new FileInputStream(file));
	 * 
	 * return ResponseEntity.ok() // Content-Disposition
	 * .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" +
	 * file.getName()) // Content-Type .contentType(mediaType) // Contet-Length
	 * .contentLength(file.length()) // .body(resource); }
	 */

}
